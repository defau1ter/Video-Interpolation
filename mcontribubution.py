# -*- coding: utf-8 -*-
"""ViN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n7layXflnOKTk_UfFZQkTVB_OLq4RO50
"""

import cv2
import numpy as np
import subprocess

#only frames flow with pallet frames_capacity/sec=target_fps
def optical_flow(input_path, output_path, target_fps=60):
    input_video = cv2.VideoCapture(input_path)

    width = int(input_video.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(input_video.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = input_video.get(cv2.CAP_PROP_FPS)

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    output_video = cv2.VideoWriter(output_path, fourcc, target_fps, (width, height))

    success, frame = input_video.read()
    prev_frame = frame

    while success:
        output_video.write(frame)

        num_interpolations = int((target_fps / fps) - 1)
        for _ in range(num_interpolations):
            output_video.write(prev_frame)

        success, frame = input_video.read()
        prev_frame = frame

    input_video.release()
    output_video.release()

input_path = '/content/clip.mp4'
output_path = '/content/clip-01out.mp4'
optical_flow(input_path, output_path, target_fps=60)

# frame blending for video
def vin(input_path, output_path):
        video = cv2.VideoCapture(input_path)
        fps = video.get(cv2.CAP_PROP_FPS)
        width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))
        num_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))

        new_fps =60
        new_duration = num_frames / fps
        new_frame_count = int(new_fps * new_duration)


        cmd = [
            'ffmpeg',
            '-y',  # Overwrite output
            '-i', input_path,
            '-vf', f'minterpolate=fps={new_fps}',
            '-c:v', 'libx264',
            '-crf', '17',
            '-pix_fmt', 'yuv420p',
            '-r', str(new_fps),
            output_path
        ]
        subprocess.run(cmd)

        # Print output video information
        print(f'Input: {input_path}')
        print(f'Output: {output_path}')
        print(f'Original FPS: {fps}')
        print(f'New FPS: {new_fps}')
        print(f'Original Duration: {new_duration} seconds')
        print(f'New Duration: {new_frame_count / new_fps} seconds')
        print(f'Original Resolution: {width}x{height}')
        print('Interpolation completed.')

input_path = '/content/clip.mp4'
output_path = '/content/clip1.mp4'
vin(input_path, output_path)

# for unstable res
def vin2(input_path, output_path):
        video = cv2.VideoCapture(input_path)
        fps = video.get(cv2.CAP_PROP_FPS)
        width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))
        num_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))

        new_fps =60
        new_duration = num_frames / fps
        new_frame_count = int(new_fps * new_duration)


        cmd = [
        'ffmpeg',
        '-y',  # Overwrite output
        '-i', input_path,
        '-vf', f'scale={new_width}:{new_height},eq=brightness={brightness}:contrast={contrast},unsharp={sharpness}x{sharpness}',#scale the vars except resolution
        '-c:v', 'libx264',
        '-crf', '17',
        '-pix_fmt', 'yuv420p',
        '-r', str(new_fps),
        output_path
    ]
        subprocess.run(cmd)

        # Print output video information
        print(f'Input: {input_path}')
        print(f'Output: {output_path}')
        print(f'Original FPS: {fps}')
        print(f'New FPS: {new_fps}')
        print(f'Original Duration: {new_duration} seconds')
        print(f'New Duration: {new_frame_count / new_fps} seconds')
        print(f'Original Resolution: {width}x{height}')
        print('Interpolation completed.')

input_path = '/content/clip.mp4'
output_path = '/content/clip1.mp4'
vin2(input_path, output_path)